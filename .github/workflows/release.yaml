name: Create Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      release_notes: ${{ steps.extract-release-notes.outputs.release_notes }}
      is_valid: ${{ steps.validate-conditions.outputs.is_valid }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version from tag
        id: extract-version
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG" >> $GITHUB_OUTPUT

      - name: Validate release conditions
        id: validate-conditions
        run: |
          # Check if VERSION file contains the same version as the tag
          VERSION_CONTENT=$(cat VERSION)
          TAG_VERSION=${{ steps.extract-version.outputs.version }}
          
          # Get current date in YYYY-MM-DD format
          CURRENT_DATE=$(date +%Y-%m-%d)
          
          # Check first line of CHANGES file contains current date using Perl
          DATE_CHECK=$(perl -ne 'if ($. == 1 && /'"$CURRENT_DATE"'/) { print "yes"; exit; } exit if $. > 1;' CHANGES)
          
          echo "Checking conditions:"
          echo "1. VERSION content ($VERSION_CONTENT) matches tag version ($TAG_VERSION)"
          echo "2. First line of CHANGES contains today's date ($CURRENT_DATE)"
          echo "   First line check result: $DATE_CHECK"
          
          if [[ "$VERSION_CONTENT" == "$TAG_VERSION" && "$DATE_CHECK" == "yes" ]]; then
            echo "All conditions met!"
            echo "is_valid=true" >> $GITHUB_OUTPUT
          else
            echo "Release conditions not met:"
            echo "Tag version: v$TAG_VERSION"
            echo "VERSION file content: $VERSION_CONTENT"
            echo "CHANGES first line date check: $FIRST_LINE should contain $CURRENT_DATE"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Extract release notes
        id: extract-release-notes
        run: |
          # Create a temporary file to store the release notes
          TEMP_FILE=$(mktemp)
          
          # Extract the entire first section of CHANGES file using Perl and save to temp file
          perl -0777 -ne '
            if (/^((\d{4}-\d{2}-\d{2}).*?)(?=^\d{4}-\d{2}-\d{2}|\z)/ms) {
              print $1;
            }
          ' CHANGES > "$TEMP_FILE"
          
          # Use GitHub's approach for multiline outputs
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat "$TEMP_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Also save the release notes as an artifact for debugging
          mkdir -p release_artifacts
          cp "$TEMP_FILE" release_artifacts/release_notes.txt
          
      - name: Upload release notes for debugging
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_artifacts/

  build-and-release:
    needs: validate-release
    if: needs.validate-release.outputs.is_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf automake librrds-perl rrdtool dma
      - name: Build project
        run: |        
          ./bootstrap
          ./configure --enable-maintainer-mode
          make
          make clean
          make install
          make dist

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: smokeping-${{ needs.validate-release.outputs.version }}.tar.gz
          name: Release v${{ needs.validate-release.outputs.version }}
          body: |
            ${{ needs.validate-release.outputs.release_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
